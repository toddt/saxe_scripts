function study = prep_oneSub_2017(study)
% Dicoms should have already been converted by dicom_oneSub_2017. This
% script modifies the 2014 preprocessing script, but uses SPM12 processing
% streams.

%Initial modifications by HLK, final modifications by TWT.

%FIX: Move wrbold (etc) loops to where they're actually needed instead of
%where they're created.




study.prep = struct;
cd(study.path)

% this script will also assume that the saxelab dicom script has been used
% to convert the dicom and therefore each subject should have the standard
% saxelab directories. If the dicoms were not converted using the saxelab
% dicom script, the user should make sure all of the standard dicom
% directories are present and/or run the makeSubjDirs.m script for each
% subject that she is using the prep script for.

% Check for non-default options
if ~isfield(study.prep,'realign')
    study.prep.realign = 1; % realign all images to first image of the run
end
if ~isfield(study.prep,'coreg')
    study.prep.coreg = 1; % coregister all images to first image of run
end
if ~isfield(study.prep,'normalize')
    study.prep.norm = 1; % normalize to MNI space
end
if ~isfield(study.prep,'smooth')
    study.prep.smooth = 1; % smooth using a fwhm mm smoothing kernel
end
if ~isfield(study.prep,'fwhm')
    study.prep.fwhm = 5; % the gaussian smoothing kernel to be used; value of fwhm in mm
end


% now the preprocessing begins
subj = study.subjects{1};
cd(subj)

%Get some paths for directories
origDir = fullfile(study.path, subj, '3danat', 'orig'); % the directory that stores the the original anatomical images
repDir = fullfile(study.path, subj, 'report'); % the directory that stores reports generated by saxelab scripts
prepDate = strrep(datestr(clock),' ', '_'); % timestamp of preprocessing


% find all of the bold images
FPbolddirs = cellstr(spm_select('FPList','./bold','dir','^0.*'))';

numBolds = length(FPbolddirs);
bolds = cell(numBolds,1); % create a cell array to store bold image names
rbolds = bolds;
wrbolds = bolds;
wrsbolds = bolds;

for iBold = 1:numBolds
    bolds{iBold} = cellstr(spm_select('ExtFPList',FPbolddirs{iBold},'^f0.*img'))';    
    if iBold == 1
        allFuncs = {bolds{iBold}{:}};
    else
        allFuncs = {allFuncs{:},bolds{iBold}{:}};
    end
end

% find the anatomical image
anatDir = spm_select('FPList',pwd,'dir','^3danat.*');
anat = spm_select('ExtFPList',anatDir,'^s0.*img');


%% REALIGN
% FIX: What if we only want to realign some runs?
spm('Defaults','fMRI');
if study.prep.realign

    spm_jobman('initcfg');
    spm_get_defaults('cmdline', 1);
    for iRealign = 1:numBolds
        jobs{iRealign}.spm.spatial.realign.estwrite.roptions.prefix = 'r';
        %FIX: explain the next two lines
        jobs{iRealign}.spm.spatial.realign.estwrite.roptions.which(1) = 2;
        jobs{iRealign}.spm.spatial.realign.estwrite.roptions.which(2) = 1;
        jobs{iRealign}.spm.spatial.realign.estwrite.data = {bolds{iRealign}'};
    end
    spm_jobman('run', jobs);
    
    for iBold = 1:numBolds
        rbolds{iBold} = cellstr(spm_select('ExtFPList',FPbolddirs{iBold},'^rf0.*img'))';
    end
end


%% Slice timing correction?
% Skipped. Rebecca's data doesn't see a benefit from it.


%% CO-REGISTER
% The first image of each functional is registered to the anatomical then 
% the remaining functional
% images are registered to the first functional of its respective run. The
% transformation parameters from the coregistration step are saved in the
% header information. These parameters can be viewed by running spm_vol and
% looking at the output from v.mat. The v.mat numbers change after the
% coregistration step but they are the same after the realignment step.
% coregistration.


% Fix: What about realignment report?
if study.prep.coreg
    clear jobs
    spm_jobman('initcfg');
    spm_get_defaults('cmdline', 1);
    
    for iCoreg = 1:numBolds
        jobs{iCoreg}.spm.spatial.coreg.estimate.source = {[rbolds{iCoreg}{1} ',1']};
        jobs{iCoreg}.spm.spatial.coreg.estimate.other = {rbolds{iCoreg}{2:end}}'; % the rest of the functional images in the run
        jobs{iCoreg}.spm.spatial.coreg.estimate.ref = {anat};      
    end
    spm_jobman('run', jobs);
end

%%SEGMENT AND NORMALIZE
% This is the spm12 way of doing normalization. First it does a
% segmentation, which creates the deformation fields to MNI space.
if ~study.prep.norm

    % FIX: Staying in native space isn't yet implemented.
else
    %segment the anatomical
    clear jobs
    jobs{1}.spm.spatial.preproc.channel.vols={anat};
    jobs{1}.spm.spatial.preproc.channel.write = [0 1]; %save the bias corrected data
    jobs{1}.spm.spatial.preproc.warp.write = [0 1]; %write out the forward deformation field
    
    spm_jobman('run', jobs);
    
    %Normalize the functionals using the deformation field we just wrote
    %out
    clear jobs        
    deformation_file = spm_select('FPList',anatDir,'^y_.*.nii');
    for iNorm = 1:numBolds
        jobs{iNorm}.spm.spatial.normalise.write.subj.def = {deformation_file};
        jobs{iNorm}.spm.spatial.normalise.write.subj.resample = rbolds{iNorm}';
    end
    
    spm_jobman('run', jobs);
    
    for iBold = 1:numBolds
        wrbolds{iBold} = cellstr(spm_select('ExtFPList',FPbolddirs{iBold},'^wrf0.*img'))';
    end
    
    %normalize anatomical
    clear jobs
    jobs{1}.spm.spatial.normalise.write.subj.def = {deformation_file};
    
    %get all the segments and normalize them, because some will be used for
    %compcor
    
    segs = cellstr(spm_select('FPList',anatDir,'^c.s0-.*.nii'));
    norm_files = [anat; segs];
    jobs{1}.spm.spatial.normalise.write.subj.resample = norm_files;
    
    spm_jobman('run', jobs);
    
end


%% SMOOTH
if ~study.prep.norm
    % FIX: Staying in native space isn't yet implemented.
    %Deal with different kernel sizes for native/normal data.
    %Deal with different prefixes for native/normal data
else
    clear jobs
    for iSmooth = 1:numBolds
        jobs{iSmooth}.spm.spatial.smooth.data = wrbolds{iSmooth}';
        jobs{iSmooth}.spm.spatial.smooth.fwhm = [study.prep.fwhm study.prep.fwhm study.prep.fwhm];
    end
    
    spm_jobman('run', jobs);
    for iBold = 1:numBolds
        wrsbolds{iBold} = cellstr(spm_select('ExtFPList',FPbolddirs{iBold},'^wrsf0.*img'))';
    end
end


% if we're going to delete the f0s for the sake of space, we should keep at
% one so we can look at it for QC purposes or we should take a picture of
% one



% GENMASK
saxelab_genmask_2017(study.path, subj)


if study.prep.norm||study.prep.smooth
    systemcmd = ['rm -rf ' fullfile(study.path, subj,'/bold/*/rf*')];
    system(systemcmd);
    end

if study.prep.norm&&study.prep.smooth
    systemcmd = ['rm -rf ' fullfile(study.path, subj,'/bold/*/wrf*')];
    system(systemcmd);
end

end
